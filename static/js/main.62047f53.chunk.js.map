{"version":3,"sources":["services.js","actions.js","rootReducer.js","fieldComponent.js","App.js","CreateCustomer.js","serviceWorker.js","index.js"],"names":["headers","content-type","url","postHeader","Headers","Accept","Content-Type","getData","_callee","payload","method","body","_args","arguments","regenerator_default","a","wrap","_context","prev","next","length","undefined","Object","objectSpread","JSON","stringify","Promise","resolve","reject","fetch","then","data","ok","json","catch","error","console","log","abrupt","sent","stop","append","constant","FETCHED_RESULT","FETCHING_RESULT","SHOW_ERROR","RESULT","RESET_STATE","CLEAR_ERROR","loadFetching","type","loadResult","loadError","submitAction","dispatch","concat","result","defineProperty","key","services","getCustomerAction","customerList","id","createNewUserAction","deleteSelectedUserAction","isCustomerDeleted","customerContact","initialState","renderDropdownList","_ref","input","valueField","textField","defaultValue","rest","objectWithoutProperties","react_default","createElement","DropdownList_default","assign","onChange","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentState","contactFields","isFieldUpdated","params","setState","getCustomer","handleSubmit","new_array","keys","forEach","obj","_","isObject","push","phone","isActive","value","submitContact","contactDetail","_id","onDelete","i","fn","filter","k","createUser","history","addContact","state","getContactFields","_this$props","submitting","_assertThisInitialize","assertThisInitialized","statusArray","text","html","map","FormSection","name","Field","component","placeholder","onClick","e","Fragment","disabled","handleErrorClick","prevProps","prevState","_this2","initialValues","isNewPropsEqualToPrevProps","isEqual","change","_this3","_this$props2","isFetching","deleteSelectedUser","isError","confirmAlert","title","message","buttons","label","LoadingOverlay_default","active","spinner","Form","onSubmit","colSpan","busy","busySpinner","className","window","location","reload","Component","ContactForm","reduxForm","form","enableReinitialize","connect","app","NewCustomer","toRedirect","react_router","to","createNewCustomer","isCreatedUser","Boolean","hostname","match","appReducer","combineReducers","action","status","QUOTE","resultQuote","formReducer","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","NotFound","es","react_router_dom","basename","process","path","CreateCustomer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62047f53.chunk.js","sourcesContent":["const headers = {\"content-type\":\"application/json;charset=UTF-8\"};\r\nconst url = \"https://simpleexpressapi.azurewebsites.net\";\r\n\r\nconst postHeader = new Headers({\r\n    'Accept':'application/json',\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n});\r\npostHeader.append('Access-Control-Allow-Origin', url);\r\npostHeader.append('Access-Control-Allow-Credentials', 'true');\r\n\r\nasync function getData(url,newHeaders=headers, payload={}, method='GET'){\r\n    const body = {\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method:method,\r\n        ...(method!==\"GET\" && {body:JSON.stringify(payload)})\r\n    }\r\n      return await new Promise((resolve,reject)=>{\r\n        fetch(url,{...body})\r\n        .then(data=>{\r\n            if(!data.ok){\r\n                return null;\r\n            }\r\n            return data.json();\r\n        })\r\n        .then(data=>resolve(data))\r\n        .catch(function(error) {\r\n            console.log('Looks like there was a problem: \\n', error);\r\n            return null;\r\n        });\r\n      }).then(data=>data)      \r\n}\r\n\r\nexport function submitForm(payload){\r\n    return getData(`${url}/update`,postHeader,payload,'POST')\r\n            .then(result=>{\r\n                return {[payload.key]:result};\r\n            })\r\n}\r\n\r\nexport function getCustomerService(payload={}){\r\n    return getData(`${url}/get`+(payload.id&&'?id='+payload.id||'')).then(result=>{\r\n        return {[payload.key]:result};\r\n    });\r\n}\r\n\r\nexport function createNewUserService(payload={}){\r\n    return getData(`${url}/insert`,'',payload,'POST')\r\n            .then(result=>{ return {[payload.key]:result}});\r\n}\r\n\r\nexport function deleteSelectedUserService(payload){\r\n    return getData(`${url}/delete`,'',payload,'DELETE')\r\n            .then(result=>{ return {[payload.key]:result}});\r\n}\r\n","import * as services from './services';\r\n\r\nexport const constant = {\r\n    FETCHED_RESULT : 'FETCHED_RESULT',\r\n    FETCHING_RESULT : 'FETCHING_RESULT',\r\n    SHOW_ERROR: 'SHOW_ERROR',\r\n    RESULT : 'RESULT',\r\n    RESET_STATE : 'RESET_STATE',\r\n    CLEAR_ERROR : 'CLEAR_ERROR'\r\n}\r\n\r\nconst loadFetching = (payload) => {\r\n    return {\r\n        type: constant.FETCHING_RESULT,\r\n        ...payload\r\n    }\r\n}\r\n\r\nconst loadResult = payload => {\r\n    return {\r\n        type: constant.FETCHED_RESULT,\r\n        payload\r\n    }\r\n}\r\n\r\nconst loadError = error => {\r\n    return {\r\n        type: constant.SHOW_ERROR,\r\n        ...error\r\n    }\r\n}\r\n\r\nexport const handleErrorClick = payload => {\r\n    return dispatch =>{\r\n        dispatch({\r\n            type: constant.CLEAR_ERROR\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetStateAction = () => {\r\n    return {\r\n        type: constant.RESET_STATE,\r\n    }\r\n}\r\n\r\nexport const submitAction = payload =>{\r\n    return dispatch=>{\r\n        dispatch(loadFetching());\r\n        services.submitForm({...payload})\r\n        .then(result=>{\r\n            dispatch(loadResult({...result}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));\r\n    }\r\n}\r\n\r\nexport function getCustomerAction(payload){\r\n    return dispatch=>{\r\n        dispatch(loadFetching({customerList:[]}));\r\n        services.getCustomerService(payload)\r\n        .then(result=>{\r\n            dispatch(loadResult({...result}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));        \r\n    }\r\n}\r\n\r\nexport function createNewUserAction (payload){\r\n    return dispatch=>{\r\n        dispatch(loadFetching());\r\n        services.createNewUserService({...payload,key:'isCreatedUser'})\r\n        .then(result=>{\r\n            dispatch(loadResult({...result}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));        \r\n    }\r\n}\r\n\r\nexport function deleteSelectedUserAction(payload){\r\n    return dispatch=>{\r\n        dispatch(loadFetching());\r\n        services.deleteSelectedUserService({id:payload,key:'isCustomerDeleted'})\r\n        .then(result=>{\r\n            if(result.isCustomerDeleted && result.isCustomerDeleted.ok===0){\r\n                dispatch(loadError({error:\"Couldn't delete user. This might happen if user is already not found or server Error !!\"}));\r\n            }else{\r\n                dispatch(loadResult({...result,customerContact:[]}));\r\n            }\r\n        })\r\n        .catch(error=> dispatch(loadError(error)))\r\n    }\r\n}","import {constant} from './actions';\r\n\r\nconst initialState = {\r\n    customerList: [],\r\n    customerContact:[]\r\n};\r\n\r\nexport const rootReducer = (state=initialState, action) => { \r\n    switch(action.type){\r\n        case constant.FETCHING_RESULT:\r\n            return { ...state,\r\n                isFetching:true,\r\n                isError:false\r\n            };\r\n        \r\n        case constant.SHOW_ERROR:\r\n            return { ...state,\r\n                isFetching:false,\r\n                isError:true,\r\n                error:action.error\r\n            };\r\n        case constant.CLEAR_ERROR:\r\n            return {\r\n                ...state,\r\n                isError:false,\r\n                error:null\r\n            }\r\n        case constant.FETCHED_RESULT:\r\n            return { ...state,\r\n                isFetching:false,\r\n                isError:false,\r\n                ...action.payload||[]  \r\n            };    \r\n        \r\n        case constant.RESET_STATE:\r\n            return {\r\n                ...state,\r\n                isFetching:false,\r\n                isError:false,\r\n                status: constant.QUOTE,\r\n                resultQuote:{}\r\n            };\r\n        default:\r\n            return {...state};\r\n        \r\n    }\r\n}\r\n","import React from 'react';\r\nimport DropdownList from 'react-widgets/lib/DropdownList';\r\n\r\nexport const renderDropdownList = ({ input, data, valueField, textField, defaultValue, ...rest })=>\r\n  <DropdownList \r\n    data={data}\r\n    valueField={valueField}\r\n    textField={textField}\r\n    onChange={input.onChange}\r\n    defaultValue={defaultValue}\r\n    {...input}\r\n    {...rest} />\r\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { Field, FormSection, Form, reduxForm } from 'redux-form';\nimport _ from 'lodash';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { confirmAlert } from 'react-confirm-alert';\n\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport './App.css';\n\nimport {getCustomerAction, submitAction, deleteSelectedUserAction, handleErrorClick } from './actions';\n\nimport {renderDropdownList} from './fieldComponent';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = this.componentState();\n  }\n  componentState = () =>{\n    return {\n      contactFields:[],\n      isFieldUpdated:false,\n      customerContact:[]\n    }\n  }\n\n  static getDerivedStateFromProps(props,state){\n    if(state.contactFields && state.contactFields.length>0 && props.customerContact.length===0){\n      window.location.reload();\n    }\n    return {\n      contactFields:props.customerContact[0] && props.customerContact[0].contactDetail,\n    }\n  }\n\n  componentDidMount(){\n    this.props.getCustomer({key:'customerList'});\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    const initialValues = {};\n    const {customerContact} = this.props;\n    const isNewPropsEqualToPrevProps = _.isEqual(customerContact,prevProps.customerContact);\n    \n    if((!isNewPropsEqualToPrevProps || (isNewPropsEqualToPrevProps && (prevProps.customerContact[0]\n    && !_.isEqual(this.state.contactFields, this.props.customerContact[0].contactDetail)))) && !this.state.isFieldUpdated){\n      \n      if(customerContact && customerContact[0]){\n          customerContact[0].contactDetail.forEach((obj,key)=>{\n            initialValues[`section_${key}.phone`]=obj.phone;\n            initialValues[`section_${key}.isActive`]=obj.isActive;\n          });\n      }\n\n      Object.keys(initialValues).forEach(obj=>this.props.change(obj,initialValues[obj]));\n      this.setState({isFieldUpdated:true});\n    }\n  }\n\n  onChange = params=>{\n    \n    if( typeof this.props.customerContact[0] === \"undefined\"||(this.props.customerContact[0] && params.id!== this.props.customerContact[0].id)){\n      this.setState({contactFields:[],isFieldUpdated:false},\n        ()=>this.props.getCustomer({...params,key:'customerContact'}));\n    }\n  }\n\n  handleSubmit= (params,props) => { \n    let new_array = [];\n    delete params.customerList;\n    Object.keys(params).forEach(obj=>{\n      if(_.isObject(params[obj])){\n        new_array.push({phone:params[obj].phone, isActive:params[obj].isActive.value})\n      }\n    });\n    props.submitContact({key:'customerContact', contactDetail:new_array,id:props.customerContact[0]._id})\n  }\n  \n  onDelete = (i,customerContact,fn)=>{\n      const newContactList = customerContact[0].contactDetail && customerContact[0].contactDetail.filter((obj,k)=>i!==k);\n      fn({key:'customerContact', contactDetail:newContactList,id:customerContact[0]._id})\n  }\n\n  createUser = ()=>{\n    this.props.history.push(`/createnewcustomer`);\n  }\n\n  addContact = () =>{\n    const {contactFields}= this.state;\n    contactFields.push({'phone':'','isActive':0});\n    this.setState({contactFields,isFieldUpdated:false});\n  }\n\n  getContactFields = params=>{ \n      const {submitting, submitContact ,customerContact} = this.props;\n      const {onDelete,addContact} = this;\n      const {contactFields} = this.state;\n      const statusArray = [{value:0,text:'deactivate'},{value:1,text:'activate'}];\n      let html = contactFields.map((obj,i)=>{   \n                return (\n                  <FormSection key={`field_${i}`} name={`section_${i}`}>\n                    <tr key={`row_${i}`}>\n                      <td>\n                          <Field\n                            name=\"phone\"\n                            component=\"input\"\n                            type=\"text\"\n                            placeholder=\"Phone number\"\n                          />\n                        </td>\n                      <td>    \n                        <Field\n                          name={`isActive`}\n                          component={renderDropdownList}\n                          data={statusArray}\n                          valueField='value'\n                          textField='text'\n                          defaultValue={obj.isActive}\n                      />\n                      </td>  \n                      <td> <button type=\"button\" onClick={e=>onDelete(i,customerContact,submitContact)}>Delete</button> </td>\n                    </tr>\n                  </FormSection>\n                )    \n          });\n      \n      return (<>\n                {html}\n                <tr>\n                  <td>\n                  <button type=\"button\" onClick={addContact}>\n                    Add Number\n                  </button>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                  <button type=\"submit\" disabled={submitting}>\n                    Update\n                  </button>\n                  </td>\n                </tr>\n              </>)\n  }\n  handleErrorClick=()=>{\n    this.props.handleErrorClick();\n    this.props.history.push('/');\n  }\n  render(){ \n    const {\n      customerList, \n      isFetching, \n      customerContact, \n      handleSubmit, \n      deleteSelectedUser,\n      submitContact,\n      error,\n      isError,\n      } = this.props;\n\n      if(isError){\n        confirmAlert({\n        title: 'Error',\n        message: error||\"There is an Error Sorry !!\",\n        buttons: [\n          {\n            label: 'Ok',\n            onClick: () => this.handleErrorClick('Click Yes')\n          },\n          \n        ]\n      });\n    }\n    return (\n            <LoadingOverlay\n            active={isFetching}\n            spinner\n            >\n            <Form onSubmit={handleSubmit(e=>this.handleSubmit(e,{customerContact,submitContact}))}>\n                \n                <table>\n                  <tbody>\n                    <tr>\n                      <td colSpan=\"3\">\n                      <Field\n                          busy={isFetching}\n                          busySpinner={<span className=\"fas fa-sync fa-spin\" />}\n                          name=\"customerList\"\n                          component={renderDropdownList}\n                          data={customerList}\n                          valueField='id'\n                          textField='name'\n                          placeholder='Select Customer'\n                          onChange={this.onChange}\n                        />\n                      </td>\n                    </tr>\n                    {!!customerContact.length && this.getContactFields()}\n                    <tr>\n                    <td colSpan=\"3\">\n                      <button type=\"button\" onClick={this.createUser}>\n                        Create User\n                      </button>\n                      </td>\n                    </tr>\n                    {customerContact[0] &&\n                      (<tr>\n                      <td colSpan=\"3\">\n                        <button type=\"button\" onClick={e=>deleteSelectedUser(customerContact[0]._id)}>\n                          Delete Selected User\n                        </button>\n                        </td>\n                      </tr>)||null\n                    }\n                  </tbody>\n                </table>\n            </Form>\n          </LoadingOverlay> )\n  }\n}\n\nconst ContactForm = reduxForm({form : 'ContactForm',enableReinitialize: true,})(App);\n\nconst mapStateToProps = state=>{\n  return {\n    customerList : state.app.customerList || [],\n    isFetching : state.app.isFetching,\n    customerContact : state.app.customerContact || [],\n    error: state.app.error,\n    isError: state.app.isError\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getCustomer : params=> dispatch(getCustomerAction(params)),\n  submitContact : params=>dispatch(submitAction(params)),\n  deleteSelectedUser : params=>dispatch(deleteSelectedUserAction(params)),\n  handleErrorClick : params=> dispatch(handleErrorClick(params))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, Form, reduxForm } from 'redux-form';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {createNewUserAction} from './actions';\r\n\r\nconst CreateCustomer = props => {\r\n    const redirect = () => {\r\n        props.history.push(`/`);\r\n    }\r\n    if(props.toRedirect){\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n    return (<Form name='newCustomer' onSubmit={props.handleSubmit(props.createNewCustomer)}>\r\n                <Field\r\n                name=\"name\"\r\n                component=\"input\"\r\n                type=\"text\"\r\n                placeholder=\"Customer Name\"\r\n                />\r\n            <input type=\"Submit\" value=\"Create Customer\"/>\r\n            <button type=\"button\" onClick={redirect}>Redirect To Customer Contact Page </button>\r\n        </Form>)\r\n}\r\n\r\nconst NewCustomer = reduxForm({form : 'newCustomer',enableReinitialize: true,})(CreateCustomer);\r\n\r\nconst mapStateToProps = state=>({\r\n    toRedirect:state.app.isCreatedUser && state.app.isCreatedUser.ok\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    createNewCustomer : payload=>dispatch(createNewUserAction(payload))\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(NewCustomer);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './rootReducer';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form'\n\nimport App from './App';\nimport CreateCustomer from './CreateCustomer';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appReducer =  combineReducers({app:rootReducer, form:formReducer}); \nconst loggerMiddleware = createLogger();\nconst store = createStore(appReducer, applyMiddleware(thunkMiddleware,loggerMiddleware));\nconst NotFound = () => <strong>Sorry No Page Found</strong>;\nconst Routing = () => (\n    <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path={\"/\"} component={App} />\n            <Route path={\"/createnewcustomer\"} component={CreateCustomer} />\n            <Route component={NotFound}/>\n        </Switch>  \n    </Router>\n)\n\nconst app = <Provider store={store}><Routing/></Provider>\n\n// function App(){\n//     var url = 'https://simpleexpressapi.azurewebsites.net/update';\n// var data = {id:'5d31b40448454a3bfcfb7b53',contactDetail:[{\"phone\":\"233343455\",\"isActive\":1}]};\n\n// fetch(url, {\n//   method: 'POST', // or 'PUT'\n//   body: JSON.stringify(data), // data can be `string` or {object}!\n//   headers:{\n//     'Content-Type': 'application/json'\n//   }\n// }).then(res => res.json())\n// .then(response => console.log('Success:', JSON.stringify(response)))\n// .catch(error => console.error('Error:', error));\n\n\n// return <div>hi</div>;\n// }\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}