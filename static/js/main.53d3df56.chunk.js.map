{"version":3,"sources":["services.js","actions.js","rootReducer.js","validation.js","fieldComponent.js","App.js","CreateCustomer.js","customMiddleware.js","serviceWorker.js","index.js"],"names":["url","postHeader","Headers","Accept","Content-Type","getData","_callee","newHeaders","payload","method","body","_args","arguments","regenerator_default","a","wrap","_context","prev","next","length","undefined","Object","objectSpread","headers","JSON","stringify","Promise","resolve","reject","fetch","then","data","ok","json","catch","error","console","log","abrupt","sent","stop","append","constant","FETCHED_RESULT","FETCHING_RESULT","SHOW_ERROR","RESULT","RESET_STATE","CLEAR_ERROR","loadFetching","type","loadResult","loadError","submitAction","dispatch","concat","result","defineProperty","key","services","getCustomerAction","customerList","id","createNewUserAction","deleteSelectedUserAction","isCustomerDeleted","customerContact","initialState","required","value","maxLength15","minLength2","isString","test","isNumeric","minLength8","renderDropdownList","_ref","input","valueField","textField","defaultValue","rest","objectWithoutProperties","react_default","createElement","DropdownList_default","assign","onChange","renderField","_ref2","label","placeholder","_ref2$meta","meta","touched","className","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentState","contactFields","isFieldUpdated","params","destroy","setState","getCustomer","handleSubmit","new_array","contactFormFields","newProps","_","pick","keys","forEach","obj","isObject","phone","push","isActive","submitContact","contactDetail","_id","onDelete","i","fn","newContactList","removedNumber","filter","k","action","createUser","window","location","href","addContact","updatedContactField","state","getContactFields","_this$props","submitting","_assertThisInitialize","assertThisInitialized","statusArray","text","html","map","FormSection","name","Field","component","maxlength","validate","onClick","e","Fragment","colSpan","disabled","handleErrorClick","history","nextProps","nextState","selectedUser","change","isEqual","isCurrentContactPropsEmpty","isUserDeletedOneRow","isSameUser","prevProps","prevState","_this2","initialValues","contactFormFieldsValue","untouch","_this3","_this$props2","isFetching","deleteSelectedUser","isError","confirmAlert","title","message","buttons","LoadingOverlay_default","active","spinner","Form","onSubmit","busy","busySpinner","Component","ContactForm","reduxForm","form","enableReinitialize","forceUnregisterOnUnmount","connect","app","registeredFields","getFormValues","NewCustomer","_useState","useState","_useState2","slicedToArray","toRedirect","setToBeRedirect","react_router","to","createNewCustomer","isCreatedUser","customMiddleware","actionTypes","UNREGISTER_FIELD","REGISTER_FIELD","indexOf","Boolean","hostname","match","appReducer","combineReducers","status","QUOTE","resultQuote","formReducer","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","NotFound","es","react_router_dom","basename","process","path","CreateCustomer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53d3df56.chunk.js","sourcesContent":["const url = \"https://simpleexpressapi.azurewebsites.net\";\r\n\r\nconst postHeader = new Headers({\r\n    'Accept':'application/json',\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n});\r\npostHeader.append('Access-Control-Allow-Origin', url);\r\npostHeader.append('Access-Control-Allow-Credentials', 'true');\r\n\r\nasync function getData(url,newHeaders={'Content-Type': 'application/json'}, payload={}, method='GET'){\r\n    const body = {\r\n        headers:newHeaders,\r\n        method:method,\r\n        ...(method!==\"GET\" && {body:JSON.stringify(payload)})\r\n    }\r\n      return await new Promise((resolve,reject)=>{\r\n        fetch(url,{...body})\r\n        .then(data=>{\r\n            if(!data.ok){\r\n                return null;\r\n            }\r\n            return data.json();\r\n        })\r\n        .then(data=>resolve(data))\r\n        .catch(function(error) {\r\n            console.log('Looks like there was a problem: \\n', error);\r\n            return null;\r\n        });\r\n      }).then(data=>data)      \r\n}\r\n\r\nexport function submitForm(payload){\r\n    return getData(`${url}/update`,postHeader,payload,'POST')\r\n            .then(result=>{\r\n                return {[payload.key]:result};\r\n            })\r\n}\r\n\r\nexport function getCustomerService(payload={}){\r\n    return getData(`${url}/get`+((payload.id&&'?id='+payload.id)||'')).then(result=>{\r\n        return {[payload.key]:result};\r\n    });\r\n}\r\n\r\nexport function createNewUserService(payload={}){\r\n    return getData(`${url}/insert`, postHeader, payload, 'POST')\r\n            .then(result=>{ return {[payload.key]:result}});\r\n}\r\n\r\nexport function deleteSelectedUserService(payload){\r\n    return getData(`${url}/delete`, postHeader, payload, 'DELETE')\r\n            .then(result=>{ return {[payload.key]:result}});\r\n}\r\n","import * as services from './services';\r\n\r\nexport const constant = {\r\n    FETCHED_RESULT : 'FETCHED_RESULT',\r\n    FETCHING_RESULT : 'FETCHING_RESULT',\r\n    SHOW_ERROR: 'SHOW_ERROR',\r\n    RESULT : 'RESULT',\r\n    RESET_STATE : 'RESET_STATE',\r\n    CLEAR_ERROR : 'CLEAR_ERROR'\r\n}\r\n\r\nconst loadFetching = (payload) => {\r\n    return {\r\n        type: constant.FETCHING_RESULT,\r\n        ...payload\r\n    }\r\n}\r\n\r\nconst loadResult = payload => {\r\n    return {\r\n        type: constant.FETCHED_RESULT,\r\n        payload\r\n    }\r\n}\r\n\r\nconst loadError = error => {\r\n    return {\r\n        type: constant.SHOW_ERROR,\r\n        ...error\r\n    }\r\n}\r\n\r\nexport const handleErrorClick = payload => {\r\n    return dispatch =>{\r\n        dispatch({\r\n            type: constant.CLEAR_ERROR\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetStateAction = () => {\r\n    return {\r\n        type: constant.RESET_STATE,\r\n    }\r\n}\r\n\r\nexport const submitAction = payload =>{\r\n    return dispatch=>{\r\n        dispatch(loadFetching());\r\n        services.submitForm({...payload})\r\n        .then(result=>{\r\n            dispatch(loadResult({...result }));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));\r\n    }\r\n}\r\n\r\nexport function getCustomerAction(payload){\r\n    return dispatch=>{\r\n        dispatch(loadFetching({customerList:[]}));\r\n        services.getCustomerService(payload)\r\n        .then(result=>{\r\n            dispatch(loadResult({...result}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));        \r\n    }\r\n}\r\n\r\nexport function createNewUserAction (payload){\r\n    return dispatch=>{\r\n        dispatch(loadFetching());\r\n        services.createNewUserService({...payload,key:'isCreatedUser'})\r\n        .then(result=>{\r\n            dispatch(loadResult({...result}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));        \r\n    }\r\n}\r\n\r\nexport function deleteSelectedUserAction(payload){\r\n    return dispatch=>{\r\n        dispatch(loadFetching());\r\n        services.deleteSelectedUserService({id:payload,key:'customerList'})\r\n        .then(result=>{\r\n            if(result.isCustomerDeleted && result.isCustomerDeleted.ok===0){\r\n                dispatch(loadError({error:\"Couldn't delete user. This might happen if user is already not found or server Error !!\"}));\r\n            }else{\r\n                dispatch(loadResult({...result,customerContact:[]}));\r\n            }\r\n        })\r\n        .catch(error=> dispatch(loadError(error)))\r\n    }\r\n}","import {constant} from './actions';\r\n\r\nconst initialState = {\r\n    customerList: [],\r\n    customerContact:[]\r\n};\r\n\r\nexport const rootReducer = (state=initialState, action) => { \r\n    switch(action.type){\r\n        case constant.FETCHING_RESULT:\r\n            return { ...state,\r\n                isFetching:true,\r\n                isError:false\r\n            };\r\n        \r\n        case constant.SHOW_ERROR:\r\n            return { ...state,\r\n                isFetching:false,\r\n                isError:true,\r\n                error:action.error\r\n            };\r\n        case constant.CLEAR_ERROR:\r\n            return {\r\n                ...state,\r\n                isError:false,\r\n                error:null\r\n            }\r\n        case constant.FETCHED_RESULT:\r\n            return { ...state,\r\n                isFetching:false,\r\n                isError:false,\r\n                ...action.payload||[]  \r\n            };    \r\n        \r\n        case constant.RESET_STATE:\r\n            return {\r\n                ...state,\r\n                isFetching:false,\r\n                isError:false,\r\n                status: constant.QUOTE,\r\n                resultQuote:{}\r\n            };\r\n        default:\r\n            return {...state};\r\n        \r\n    }\r\n}\r\n","export const required = value => (value || typeof value === 'string' ? undefined : 'Required')\r\n\r\nexport const maxLength15 = value =>\r\n  value && value.length > 15 ? `Must be 15 characters or less` : undefined;\r\n\r\nexport const minLength2 = value =>\r\n  value && value.length < 2 ? `Must be 2 characters or more` : undefined; \r\n\r\nexport const isString = value =>\r\n  value && /^[a-zA-Z ]*$/.test(value) ? undefined : 'Must be alphabetic only';   \r\n\r\nexport const isNumeric = value => value && !(/^[0-9]+$/).test(value)? 'Must be numeric only': undefined;\r\n    \r\nexport const minLength8 = value =>\r\n    value && value.length < 8 ? `Must be of length 8 or more` : undefined;\r\n","import React from 'react';\r\nimport DropdownList from 'react-widgets/lib/DropdownList';\r\n\r\nexport const renderDropdownList = ({ input, data, valueField, textField, defaultValue, ...rest })=>\r\n  <DropdownList \r\n    data={data}\r\n    valueField={valueField}\r\n    textField={textField}\r\n    onChange={input.onChange}\r\n    defaultValue={defaultValue}\r\n    {...input}\r\n    {...rest} />\r\n\r\n\r\nexport const renderField = ({\r\n      input,\r\n      label,\r\n      type,\r\n      placeholder,\r\n      meta: { touched, error }\r\n    }) => (\r\n      <div>\r\n        <label>{label}</label>\r\n        <div className=\"input\">\r\n          <p className={((error && touched && \"zero-button-margin\")||\"\")}>\r\n            <input className={((error && touched && \"zero-button-margin\")||\"\")} {...input} placeholder={placeholder} type={type} />\r\n          </p>\r\n          {touched &&\r\n            (error && <p className=\"error\"><span>{error}</span></p>)}\r\n        </div>\r\n      </div>\r\n    )\r\n    ","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, FormSection, Form, reduxForm, unregisterField } from 'redux-form';\r\nimport _ from 'lodash';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport { getFormValues } from 'redux-form/immutable'\r\n\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport './App.css';\r\n\r\nimport {getCustomerAction, submitAction, deleteSelectedUserAction, handleErrorClick } from './actions';\r\n\r\nimport {required, isNumeric, minLength8} from './validation';\r\n\r\nimport {renderDropdownList, renderField} from './fieldComponent';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = this.componentState();\r\n  }\r\n  componentState = () =>{\r\n    return {\r\n      contactFields:[],\r\n      isFieldUpdated:false,\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n\r\n    const selectedUser = (nextProps.customerContact[0] && nextProps.customerContact[0]._id) || \"\";\r\n    nextProps.change('customerList',selectedUser);\r\n\r\n    if(!_.isEqual(this.props.customerContact,nextProps.customerContact) || !_.isEqual(this.state.contactFields,nextState.contactFields)){\r\n\r\n        const isCurrentContactPropsEmpty = this.props.customerContact[0] && nextProps.customerContact[0] && (this.props.customerContact[0].contactDetail.length > nextProps.customerContact[0].contactDetail.length);\r\n\r\n        const isUserDeletedOneRow = nextProps.customerContact[0] && ((nextState.contactFields.length+1)===this.state.contactFields.length);\r\n        const isSameUser = nextProps.customerContact[0] && this.props.customerContact[0] && this.props.customerContact[0]._id == nextProps.customerContact[0]._id;\r\n        \r\n        const contactFields =  ((isUserDeletedOneRow || isCurrentContactPropsEmpty) && nextState.contactFields) || (nextProps.customerContact[0] && nextProps.customerContact[0].contactDetail) || [];\r\n        \r\n        this.setState({\r\n              isFieldUpdated: false,\r\n              contactFields: (isSameUser && contactFields) || (nextProps.customerContact[0] && nextProps.customerContact[0].contactDetail)\r\n            });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.getCustomer({key:'customerList'});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    const initialValues = {};\r\n    const { contactFields } = this.state;\r\n    const { contactFormFieldsValue } = this.props;\r\n\r\n    if(!this.state.isFieldUpdated && contactFields.length){\r\n      \r\n      contactFields.forEach((obj,key)=>{ console.log(contactFormFieldsValue[`section_${key}`],key)\r\n            initialValues[`section_${key}.phone`]=obj.phone || (contactFormFieldsValue[`section_${key}`] && contactFormFieldsValue[`section_${key}`].phone) ||\"\";\r\n            initialValues[`section_${key}.isActive`]=obj.isActive||  (contactFormFieldsValue[`section_${key}`] && contactFormFieldsValue[`section_${key}`].isActive)||0;\r\n      });\r\n\r\n      if(Object.keys(initialValues).length){\r\n          Object.keys(initialValues).forEach(obj=>{\r\n              this.props.change(obj,initialValues[obj]); this.props.untouch(obj)\r\n          });\r\n        this.setState({isFieldUpdated:true});\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  onChange = params=>{\r\n    \r\n    if( typeof this.props.customerContact[0] === \"undefined\"||(this.props.customerContact[0] && params.id!== this.props.customerContact[0].id)){\r\n      this.props.destroy(); \r\n      this.setState({contactFields:[],isFieldUpdated:false},\r\n        ()=>{  this.props.getCustomer({...params,key:'customerContact'}); });\r\n    }\r\n  }\r\n\r\n  handleSubmit= (params,props) => { \r\n    let new_array = [];\r\n    delete params.customerList;\r\n    const {contactFormFields, customerContact } = props;\r\n    const newProps = _.pick(params,_.keys(contactFormFields));\r\n    Object.keys(newProps).forEach(obj=>{\r\n      if(_.isObject(params[obj]) && params[obj].phone){\r\n        new_array.push({phone:params[obj].phone, isActive:params[obj].isActive.value||0})\r\n      }\r\n    });\r\n    props.submitContact({key:'customerContact', contactDetail:new_array,id: customerContact[0]._id})\r\n  }\r\n  \r\n  onDelete = (i,customerContact,fn,props)=>{\r\n      let newContactList = [];\r\n      let removedNumber = \"\";\r\n      const id = props.customerContact[0]._id;\r\n      new Promise((resolve,reject)=>{\r\n        newContactList = customerContact.filter((obj,k)=>i!==k);\r\n        removedNumber = customerContact.filter((obj,k)=>i===k);\r\n        resolve({newContactList,removedNumber});\r\n      })\r\n      .then((result)=>{\r\n        this.setState({contactFields:result.newContactList},()=>{\r\n          if(removedNumber[0].phone){\r\n            fn({action:'delete', key:'customerContact', contactDetail:newContactList.filter((obj)=>obj.phone),id:id});\r\n          }\r\n        })\r\n    });\r\n      \r\n  }\r\n\r\n  createUser = ()=>{\r\n    window.location.href = `#/createnewcustomer`;\r\n  }\r\n\r\n  addContact = () =>{\r\n    let updatedContactField= this.state.contactFields||[];\r\n    updatedContactField.push({'phone':'','isActive':0});\r\n    new Promise((resolve,reject)=>{\r\n      this.setState({contactFields:updatedContactField},_=>resolve());\r\n    });\r\n  }\r\n\r\n  getContactFields = params=>{ \r\n      const {submitting, submitContact } = this.props;\r\n      const {onDelete,addContact} = this;\r\n      const {contactFields} = this.state;\r\n      const statusArray = [{value:0,text:'deactivate'},{value:1,text:'activate'}];\r\n      let html = contactFields && contactFields.map((obj,i)=>{   \r\n                return (\r\n                  <FormSection key={`field_${i}`} name={`section_${i}`}>\r\n                    <tr key={`row_${i}`}>\r\n                      <td className=\"table-column\">\r\n                          <Field\r\n                            name=\"phone\"\r\n                            component={renderField}\r\n                            type=\"text\"\r\n                            placeholder=\"Phone number\"\r\n                            maxlength={15}\r\n                            validate={[required, isNumeric, minLength8]}\r\n                          />\r\n                        </td>\r\n                      <td className=\"table-column\">    \r\n                        <Field\r\n                          name={`isActive`}\r\n                          component={renderDropdownList}\r\n                          data={statusArray}\r\n                          valueField='value'\r\n                          textField='text'\r\n                          defaultValue={statusArray[0]}\r\n                      />\r\n                      </td>  \r\n                      <td className=\"table-column\"> \r\n                        <button type=\"button\" onClick={e=>onDelete(i,contactFields,submitContact,this.props)}>\r\n                          Delete\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </FormSection>\r\n                )    \r\n          });\r\n      \r\n      return (<>\r\n                {html}\r\n                <tr>\r\n                  <td colSpan=\"3\">\r\n                  <button type=\"button\" onClick={addContact}>\r\n                    Add Number\r\n                  </button>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td colSpan=\"3\">\r\n                  <button type=\"submit\" disabled={submitting}>\r\n                    Update\r\n                  </button>\r\n                  </td>\r\n                </tr>\r\n              </>)\r\n  }\r\n  handleErrorClick=()=>{\r\n    this.props.handleErrorClick();\r\n    this.props.history.push('/');\r\n  }\r\n  render(){ \r\n    const {\r\n      customerList, \r\n      isFetching, \r\n      customerContact, \r\n      handleSubmit, \r\n      deleteSelectedUser,\r\n      submitContact,\r\n      error,\r\n      isError,\r\n      contactFormFields,\r\n      } = this.props;\r\n\r\n      if(isError){\r\n        confirmAlert({\r\n        title: 'Error',\r\n        message: error||\"There is an Error Sorry !!\",\r\n        buttons: [\r\n          {\r\n            label: 'Ok',\r\n            onClick: () => this.handleErrorClick('Click Yes')\r\n          },\r\n          \r\n        ]\r\n      });\r\n    }\r\n    return (\r\n            <LoadingOverlay\r\n            active={isFetching}\r\n            spinner\r\n            >\r\n            <Form name=\"add-contact\" onSubmit={handleSubmit(e=>this.handleSubmit(e,{customerContact, contactFormFields, submitContact}))}>\r\n                \r\n                <table>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td colSpan=\"3\">\r\n                      <Field\r\n                          busy={isFetching}\r\n                          busySpinner={<span className=\"fas fa-sync fa-spin\" />}\r\n                          name=\"customerList\"\r\n                          component={renderDropdownList}\r\n                          data={customerList}\r\n                          valueField='id'\r\n                          textField='name'\r\n                          placeholder='Select Customer'\r\n                          onChange={this.onChange}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                    {!!customerContact.length && this.getContactFields()}\r\n                    <tr>\r\n                    <td colSpan=\"3\">\r\n                      <button type=\"button\" onClick={this.createUser}>\r\n                        Create User\r\n                      </button>\r\n                      </td>\r\n                    </tr>\r\n                    {(customerContact[0] &&\r\n                      (<tr>\r\n                      <td colSpan=\"3\">\r\n                        <button type=\"button\" onClick={e=>deleteSelectedUser(customerContact[0]._id)}>\r\n                          Delete Selected User\r\n                        </button>\r\n                        </td>\r\n                      </tr>))||null\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n            </Form>\r\n          </LoadingOverlay> )\r\n  }\r\n}\r\n\r\nconst ContactForm = reduxForm({form : 'ContactForm',\r\n                                enableReinitialize: true,\r\n                                forceUnregisterOnUnmount: true,\r\n                              })(App);\r\n\r\nconst mapStateToProps = state=>{\r\n  return {\r\n    customerList : state.app.customerList || [],\r\n    isFetching : state.app.isFetching,\r\n    customerContact : state.app.customerContact || [],\r\n    error: state.app.error,\r\n    isError: state.app.isError,\r\n    contactFormFields:state.form.ContactForm && state.form.ContactForm.registeredFields||{},\r\n    contactFormFieldsValue:getFormValues('ContactForm')(state)\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getCustomer : params=> dispatch(getCustomerAction(params)),\r\n  submitContact : params=>dispatch(submitAction(params)),\r\n  deleteSelectedUser : params=>dispatch(deleteSelectedUserAction(params)),\r\n  handleErrorClick : params=> dispatch(handleErrorClick(params))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, Form, reduxForm } from 'redux-form';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {createNewUserAction} from './actions';\r\nimport {renderField} from './fieldComponent';\r\nimport {required, maxLength15, minLength2, isString} from './validation';\r\n\r\nconst CreateCustomer = props => {\r\n    \r\n    const [toRedirect,setToBeRedirect] = useState(false);\r\n    if(props.toRedirect || toRedirect){\r\n        return <Redirect to=\"/\"/>\r\n    } \r\n    return (<Form name='newCustomer' onSubmit={props.handleSubmit(props.createNewCustomer)}>\r\n                <p className=\"heading\">Create New User</p>\r\n                <Field\r\n                    name=\"name\"\r\n                    component={renderField}\r\n                    type=\"text\"\r\n                    placeholder=\"Customer Name\"\r\n                    validate={[required, maxLength15, minLength2, isString]}\r\n                />\r\n                {props.touched &&((props.error && <span>{props.error}</span>))}\r\n            <p><button type=\"Submit\">Create Customer</button></p>\r\n            <p><button type=\"button\" onClick={e=>setToBeRedirect(true)}>Redirect To Customer Contact Page </button></p>\r\n        </Form>)\r\n}\r\n\r\nconst NewCustomer = reduxForm({\r\n    form : 'newCustomer',\r\n    enableReinitialize: true,})(CreateCustomer);\r\n\r\nconst mapStateToProps = state=>({\r\n    toRedirect:state.app.isCreatedUser && state.app.isCreatedUser.ok\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    createNewCustomer : payload=>dispatch(createNewUserAction(payload))\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(NewCustomer);\r\n","import { change, untouch, actionTypes } from 'redux-form';\r\n\r\nconst customMiddleware= ({ dispatch }) => next => action => {\r\n    if (action.type === actionTypes.UNREGISTER_FIELD) {\r\n        dispatch(change(action.meta.form, action.payload.name, null));\r\n        dispatch(untouch(action.payload.name));\r\n    }\r\n    if (action.type === actionTypes.REGISTER_FIELD && (action.payload.name).indexOf('isActive')>-1) { \r\n        dispatch(change(action.meta.form, action.payload.name, 0));\r\n    }\r\n    next(action);\r\n};\r\n\r\n/*\r\nCustom Middleware add for redux-form.\r\n\r\nIssue: On updation of fields , values in state was not getting reset.\r\nSolution: On getting new field registration reset the form state.\r\n\r\n*/\r\n\r\nexport default customMiddleware;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { rootReducer } from './rootReducer';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport App from './App';\r\nimport CreateCustomer from './CreateCustomer';\r\nimport customMiddleware from './customMiddleware'; \r\n\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nconst appReducer =  combineReducers({app:rootReducer, form:formReducer}); \r\nconst loggerMiddleware = createLogger();\r\nconst store = createStore(appReducer, applyMiddleware(thunkMiddleware, loggerMiddleware, customMiddleware));\r\nconst NotFound = () => <strong>Sorry No Page Found</strong>;\r\nconst Routing = () => (\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n            <Route path=\"/createnewcustomer\" component={CreateCustomer} />\r\n            <Route path=\"/\" component={App} />\r\n            <Route component={NotFound}/>\r\n        </Switch>  \r\n    </HashRouter>\r\n);\r\n\r\nconst app = <Provider store={store}><Routing/></Provider>\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}