{"version":3,"sources":["services.js","actions.js","rootReducer.js","fieldComponent.js","App.js","validation.js","CreateCustomer.js","serviceWorker.js","index.js"],"names":["headers","content-type","url","postHeader","Headers","Accept","Content-Type","getData","_callee","payload","method","body","_args","arguments","regenerator_default","a","wrap","_context","prev","next","length","undefined","Object","objectSpread","JSON","stringify","Promise","resolve","reject","fetch","then","data","ok","json","catch","error","console","log","abrupt","sent","stop","append","constant","FETCHED_RESULT","FETCHING_RESULT","SHOW_ERROR","RESULT","RESET_STATE","CLEAR_ERROR","loadFetching","type","loadResult","loadError","submitAction","dispatch","concat","result","defineProperty","key","services","getCustomerAction","customerList","id","createNewUserAction","deleteSelectedUserAction","isCustomerDeleted","customerContact","initialState","renderDropdownList","_ref","input","valueField","textField","defaultValue","rest","objectWithoutProperties","react_default","createElement","DropdownList_default","assign","onChange","renderField","_ref2","label","placeholder","_ref2$meta","meta","touched","className","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentState","contactFields","isFieldUpdated","params","setState","getCustomer","handleSubmit","new_array","keys","forEach","obj","_","isObject","push","phone","isActive","value","submitContact","contactDetail","_id","onDelete","i","fn","filter","k","createUser","window","location","href","addContact","state","getContactFields","_this$props","submitting","_assertThisInitialize","assertThisInitialized","statusArray","text","html","map","FormSection","name","Field","component","onClick","e","Fragment","disabled","handleErrorClick","history","prevProps","prevState","_this2","initialValues","isNewPropsEqualToPrevProps","isEqual","change","_this3","_this$props2","isFetching","deleteSelectedUser","isError","confirmAlert","title","message","buttons","LoadingOverlay_default","active","spinner","Form","onSubmit","colSpan","busy","busySpinner","reload","Component","ContactForm","reduxForm","form","enableReinitialize","connect","app","required","maxLength15","minLength2","isString","test","NewCustomer","_useState","useState","_useState2","slicedToArray","toRedirect","setToBeRedirect","react_router","to","createNewCustomer","validate","isCreatedUser","Boolean","hostname","match","appReducer","combineReducers","action","status","QUOTE","resultQuote","formReducer","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","NotFound","es","react_router_dom","basename","process","path","CreateCustomer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc9e7eef.chunk.js","sourcesContent":["const headers = {\"content-type\":\"application/json;charset=UTF-8\"};\r\nconst url = \"https://simpleexpressapi.azurewebsites.net\";\r\n\r\nconst postHeader = new Headers({\r\n    'Accept':'application/json',\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n});\r\npostHeader.append('Access-Control-Allow-Origin', url);\r\npostHeader.append('Access-Control-Allow-Credentials', 'true');\r\n\r\nasync function getData(url,newHeaders=headers, payload={}, method='GET'){\r\n    const body = {\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method:method,\r\n        ...(method!==\"GET\" && {body:JSON.stringify(payload)})\r\n    }\r\n      return await new Promise((resolve,reject)=>{\r\n        fetch(url,{...body})\r\n        .then(data=>{\r\n            if(!data.ok){\r\n                return null;\r\n            }\r\n            return data.json();\r\n        })\r\n        .then(data=>resolve(data))\r\n        .catch(function(error) {\r\n            console.log('Looks like there was a problem: \\n', error);\r\n            return null;\r\n        });\r\n      }).then(data=>data)      \r\n}\r\n\r\nexport function submitForm(payload){\r\n    return getData(`${url}/update`,postHeader,payload,'POST')\r\n            .then(result=>{\r\n                return {[payload.key]:result};\r\n            })\r\n}\r\n\r\nexport function getCustomerService(payload={}){\r\n    return getData(`${url}/get`+((payload.id&&'?id='+payload.id)||'')).then(result=>{\r\n        return {[payload.key]:result};\r\n    });\r\n}\r\n\r\nexport function createNewUserService(payload={}){\r\n    return getData(`${url}/insert`,'',payload,'POST')\r\n            .then(result=>{ return {[payload.key]:result}});\r\n}\r\n\r\nexport function deleteSelectedUserService(payload){\r\n    return getData(`${url}/delete`,'',payload,'DELETE')\r\n            .then(result=>{ return {[payload.key]:result}});\r\n}\r\n","import * as services from './services';\r\n\r\nexport const constant = {\r\n    FETCHED_RESULT : 'FETCHED_RESULT',\r\n    FETCHING_RESULT : 'FETCHING_RESULT',\r\n    SHOW_ERROR: 'SHOW_ERROR',\r\n    RESULT : 'RESULT',\r\n    RESET_STATE : 'RESET_STATE',\r\n    CLEAR_ERROR : 'CLEAR_ERROR'\r\n}\r\n\r\nconst loadFetching = (payload) => {\r\n    return {\r\n        type: constant.FETCHING_RESULT,\r\n        ...payload\r\n    }\r\n}\r\n\r\nconst loadResult = payload => {\r\n    return {\r\n        type: constant.FETCHED_RESULT,\r\n        payload\r\n    }\r\n}\r\n\r\nconst loadError = error => {\r\n    return {\r\n        type: constant.SHOW_ERROR,\r\n        ...error\r\n    }\r\n}\r\n\r\nexport const handleErrorClick = payload => {\r\n    return dispatch =>{\r\n        dispatch({\r\n            type: constant.CLEAR_ERROR\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetStateAction = () => {\r\n    return {\r\n        type: constant.RESET_STATE,\r\n    }\r\n}\r\n\r\nexport const submitAction = payload =>{\r\n    return dispatch=>{\r\n        dispatch(loadFetching());\r\n        services.submitForm({...payload})\r\n        .then(result=>{\r\n            dispatch(loadResult({...result}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));\r\n    }\r\n}\r\n\r\nexport function getCustomerAction(payload){\r\n    return dispatch=>{\r\n        dispatch(loadFetching({customerList:[]}));\r\n        services.getCustomerService(payload)\r\n        .then(result=>{\r\n            dispatch(loadResult({...result}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));        \r\n    }\r\n}\r\n\r\nexport function createNewUserAction (payload){\r\n    return dispatch=>{\r\n        dispatch(loadFetching());\r\n        services.createNewUserService({...payload,key:'isCreatedUser'})\r\n        .then(result=>{\r\n            dispatch(loadResult({...result}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));        \r\n    }\r\n}\r\n\r\nexport function deleteSelectedUserAction(payload){\r\n    return dispatch=>{\r\n        dispatch(loadFetching());\r\n        services.deleteSelectedUserService({id:payload,key:'isCustomerDeleted'})\r\n        .then(result=>{\r\n            if(result.isCustomerDeleted && result.isCustomerDeleted.ok===0){\r\n                dispatch(loadError({error:\"Couldn't delete user. This might happen if user is already not found or server Error !!\"}));\r\n            }else{\r\n                dispatch(loadResult({...result,customerContact:[]}));\r\n            }\r\n        })\r\n        .catch(error=> dispatch(loadError(error)))\r\n    }\r\n}","import {constant} from './actions';\r\n\r\nconst initialState = {\r\n    customerList: [],\r\n    customerContact:[]\r\n};\r\n\r\nexport const rootReducer = (state=initialState, action) => { \r\n    switch(action.type){\r\n        case constant.FETCHING_RESULT:\r\n            return { ...state,\r\n                isFetching:true,\r\n                isError:false\r\n            };\r\n        \r\n        case constant.SHOW_ERROR:\r\n            return { ...state,\r\n                isFetching:false,\r\n                isError:true,\r\n                error:action.error\r\n            };\r\n        case constant.CLEAR_ERROR:\r\n            return {\r\n                ...state,\r\n                isError:false,\r\n                error:null\r\n            }\r\n        case constant.FETCHED_RESULT:\r\n            return { ...state,\r\n                isFetching:false,\r\n                isError:false,\r\n                ...action.payload||[]  \r\n            };    \r\n        \r\n        case constant.RESET_STATE:\r\n            return {\r\n                ...state,\r\n                isFetching:false,\r\n                isError:false,\r\n                status: constant.QUOTE,\r\n                resultQuote:{}\r\n            };\r\n        default:\r\n            return {...state};\r\n        \r\n    }\r\n}\r\n","import React from 'react';\r\nimport DropdownList from 'react-widgets/lib/DropdownList';\r\n\r\nexport const renderDropdownList = ({ input, data, valueField, textField, defaultValue, ...rest })=>\r\n  <DropdownList \r\n    data={data}\r\n    valueField={valueField}\r\n    textField={textField}\r\n    onChange={input.onChange}\r\n    defaultValue={defaultValue}\r\n    {...input}\r\n    {...rest} />\r\n\r\n\r\nexport const renderField = ({\r\n      input,\r\n      label,\r\n      type,\r\n      placeholder,\r\n      meta: { touched, error }\r\n    }) => (\r\n      <div>\r\n        <label>{label}</label>\r\n        <div className=\"input\">\r\n          <p className={((error && touched && \"zero-button-margin\")||\"\")}>\r\n            <input className={((error && touched && \"zero-button-margin\")||\"\")} {...input} placeholder={placeholder} type={type} />\r\n          </p>\r\n          {touched &&\r\n            (error && <p className=\"error\"><span>{error}</span></p>)}\r\n        </div>\r\n      </div>\r\n    )\r\n    ","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, FormSection, Form, reduxForm } from 'redux-form';\r\nimport _ from 'lodash';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\n\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport './App.css';\r\n\r\nimport {getCustomerAction, submitAction, deleteSelectedUserAction, handleErrorClick } from './actions';\r\n\r\nimport {renderDropdownList} from './fieldComponent';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = this.componentState();\r\n  }\r\n  componentState = () =>{\r\n    return {\r\n      contactFields:[],\r\n      isFieldUpdated:false,\r\n      customerContact:[]\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props,state){\r\n    if(state.contactFields && state.contactFields.length>0 && props.customerContact.length===0){\r\n      window.location.reload();\r\n    }\r\n    return {\r\n      contactFields:props.customerContact[0] && props.customerContact[0].contactDetail,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.getCustomer({key:'customerList'});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    const initialValues = {};\r\n    const {customerContact} = this.props;\r\n    const isNewPropsEqualToPrevProps = _.isEqual(customerContact,prevProps.customerContact);\r\n    \r\n    if((!isNewPropsEqualToPrevProps || (isNewPropsEqualToPrevProps && (prevProps.customerContact[0]\r\n    && !_.isEqual(this.state.contactFields, this.props.customerContact[0].contactDetail)))) && !this.state.isFieldUpdated){\r\n      \r\n      if(customerContact && customerContact[0]){\r\n          customerContact[0].contactDetail.forEach((obj,key)=>{\r\n            initialValues[`section_${key}.phone`]=obj.phone;\r\n            initialValues[`section_${key}.isActive`]=obj.isActive;\r\n          });\r\n      }\r\n\r\n      Object.keys(initialValues).forEach(obj=>this.props.change(obj,initialValues[obj]));\r\n      this.setState({isFieldUpdated:true});\r\n    }\r\n  }\r\n\r\n  onChange = params=>{\r\n    \r\n    if( typeof this.props.customerContact[0] === \"undefined\"||(this.props.customerContact[0] && params.id!== this.props.customerContact[0].id)){\r\n      this.setState({contactFields:[],isFieldUpdated:false},\r\n        ()=>this.props.getCustomer({...params,key:'customerContact'}));\r\n    }\r\n  }\r\n\r\n  handleSubmit= (params,props) => { \r\n    let new_array = [];\r\n    delete params.customerList;\r\n    Object.keys(params).forEach(obj=>{\r\n      if(_.isObject(params[obj])){\r\n        new_array.push({phone:params[obj].phone, isActive:params[obj].isActive.value})\r\n      }\r\n    });\r\n    props.submitContact({key:'customerContact', contactDetail:new_array,id:props.customerContact[0]._id})\r\n  }\r\n  \r\n  onDelete = (i,customerContact,fn)=>{\r\n      const newContactList = customerContact[0].contactDetail && customerContact[0].contactDetail.filter((obj,k)=>i!==k);\r\n      fn({key:'customerContact', contactDetail:newContactList,id:customerContact[0]._id})\r\n  }\r\n\r\n  createUser = ()=>{\r\n    window.location.href = `/createnewcustomer`;\r\n  }\r\n\r\n  addContact = () =>{\r\n    const {contactFields}= this.state;\r\n    contactFields.push({'phone':'','isActive':0});\r\n    this.setState({contactFields,isFieldUpdated:false});\r\n  }\r\n\r\n  getContactFields = params=>{ \r\n      const {submitting, submitContact ,customerContact} = this.props;\r\n      const {onDelete,addContact} = this;\r\n      const {contactFields} = this.state;\r\n      const statusArray = [{value:0,text:'deactivate'},{value:1,text:'activate'}];\r\n      let html = contactFields && contactFields.map((obj,i)=>{   \r\n                return (\r\n                  <FormSection key={`field_${i}`} name={`section_${i}`}>\r\n                    <tr key={`row_${i}`}>\r\n                      <td>\r\n                          <Field\r\n                            name=\"phone\"\r\n                            component=\"input\"\r\n                            type=\"text\"\r\n                            placeholder=\"Phone number\"\r\n                          />\r\n                        </td>\r\n                      <td>    \r\n                        <Field\r\n                          name={`isActive`}\r\n                          component={renderDropdownList}\r\n                          data={statusArray}\r\n                          valueField='value'\r\n                          textField='text'\r\n                          defaultValue={obj.isActive}\r\n                      />\r\n                      </td>  \r\n                      <td> <button type=\"button\" onClick={e=>onDelete(i,customerContact,submitContact)}>Delete</button> </td>\r\n                    </tr>\r\n                  </FormSection>\r\n                )    \r\n          });\r\n      \r\n      return (<>\r\n                {html}\r\n                <tr>\r\n                  <td>\r\n                  <button type=\"button\" onClick={addContact}>\r\n                    Add Number\r\n                  </button>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                  <button type=\"submit\" disabled={submitting}>\r\n                    Update\r\n                  </button>\r\n                  </td>\r\n                </tr>\r\n              </>)\r\n  }\r\n  handleErrorClick=()=>{\r\n    this.props.handleErrorClick();\r\n    this.props.history.push('/');\r\n  }\r\n  render(){ \r\n    const {\r\n      customerList, \r\n      isFetching, \r\n      customerContact, \r\n      handleSubmit, \r\n      deleteSelectedUser,\r\n      submitContact,\r\n      error,\r\n      isError,\r\n      } = this.props;\r\n\r\n      if(isError){\r\n        confirmAlert({\r\n        title: 'Error',\r\n        message: error||\"There is an Error Sorry !!\",\r\n        buttons: [\r\n          {\r\n            label: 'Ok',\r\n            onClick: () => this.handleErrorClick('Click Yes')\r\n          },\r\n          \r\n        ]\r\n      });\r\n    }\r\n    return (\r\n            <LoadingOverlay\r\n            active={isFetching}\r\n            spinner\r\n            >\r\n            <Form onSubmit={handleSubmit(e=>this.handleSubmit(e,{customerContact,submitContact}))}>\r\n                \r\n                <table>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td colSpan=\"3\">\r\n                      <Field\r\n                          busy={isFetching}\r\n                          busySpinner={<span className=\"fas fa-sync fa-spin\" />}\r\n                          name=\"customerList\"\r\n                          component={renderDropdownList}\r\n                          data={customerList}\r\n                          valueField='id'\r\n                          textField='name'\r\n                          placeholder='Select Customer'\r\n                          onChange={this.onChange}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                    {!!customerContact.length && this.getContactFields()}\r\n                    <tr>\r\n                    <td colSpan=\"3\">\r\n                      <button type=\"button\" onClick={this.createUser}>\r\n                        Create User\r\n                      </button>\r\n                      </td>\r\n                    </tr>\r\n                    {(customerContact[0] &&\r\n                      (<tr>\r\n                      <td colSpan=\"3\">\r\n                        <button type=\"button\" onClick={e=>deleteSelectedUser(customerContact[0]._id)}>\r\n                          Delete Selected User\r\n                        </button>\r\n                        </td>\r\n                      </tr>))||null\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n            </Form>\r\n          </LoadingOverlay> )\r\n  }\r\n}\r\n\r\nconst ContactForm = reduxForm({form : 'ContactForm',enableReinitialize: true,})(App);\r\n\r\nconst mapStateToProps = state=>{\r\n  return {\r\n    customerList : state.app.customerList || [],\r\n    isFetching : state.app.isFetching,\r\n    customerContact : state.app.customerContact || [],\r\n    error: state.app.error,\r\n    isError: state.app.isError\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getCustomer : params=> dispatch(getCustomerAction(params)),\r\n  submitContact : params=>dispatch(submitAction(params)),\r\n  deleteSelectedUser : params=>dispatch(deleteSelectedUserAction(params)),\r\n  handleErrorClick : params=> dispatch(handleErrorClick(params))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","export const required = value => (value || typeof value === 'string' ? undefined : 'Required')\r\n\r\nexport const maxLength15 = value =>\r\n  value && value.length > 15 ? `Must be 15 characters or less` : undefined;\r\n\r\nexport const minLength2 = value =>\r\n  value && value.length < 2 ? `Must be 2 characters or more` : undefined; \r\n\r\nexport const isString = value =>\r\n  value && /^[a-zA-Z ]*$/.test(value) ? undefined : 'Must be alphabetic only';   \r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, Form, reduxForm } from 'redux-form';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {createNewUserAction} from './actions';\r\nimport {renderField} from './fieldComponent';\r\nimport {required, maxLength15, minLength2, isString} from './validation';\r\n\r\nconst CreateCustomer = props => {\r\n    \r\n    const [toRedirect,setToBeRedirect] = useState(false);\r\n    if(props.toRedirect || toRedirect){\r\n        return <Redirect to=\"/\"/>\r\n    } \r\n    return (<Form name='newCustomer' onSubmit={props.handleSubmit(props.createNewCustomer)}>\r\n                <p className=\"heading\">Create New User</p>\r\n                <Field\r\n                    name=\"name\"\r\n                    component={renderField}\r\n                    type=\"text\"\r\n                    placeholder=\"Customer Name\"\r\n                    validate={[required, maxLength15, minLength2, isString]}\r\n                />\r\n                {props.touched &&((props.error && <span>{props.error}</span>))}\r\n            <p><button type=\"Submit\">Create Customer</button></p>\r\n            <p><button type=\"button\" onClick={e=>setToBeRedirect(true)}>Redirect To Customer Contact Page </button></p>\r\n        </Form>)\r\n}\r\n\r\nconst NewCustomer = reduxForm({\r\n    form : 'newCustomer',\r\n    enableReinitialize: true,})(CreateCustomer);\r\n\r\nconst mapStateToProps = state=>({\r\n    toRedirect:state.app.isCreatedUser && state.app.isCreatedUser.ok\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    createNewCustomer : payload=>dispatch(createNewUserAction(payload))\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(NewCustomer);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, BrowserRouter as Router, HashRouter, Switch } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { rootReducer } from './rootReducer';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nimport App from './App';\r\nimport CreateCustomer from './CreateCustomer';\r\n\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nconst appReducer =  combineReducers({app:rootReducer, form:formReducer}); \r\nconst loggerMiddleware = createLogger();\r\nconst store = createStore(appReducer, applyMiddleware(thunkMiddleware,loggerMiddleware));\r\nconst NotFound = () => <strong>Sorry No Page Found</strong>;\r\nconst Routing = () => (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n            <Route path=\"/createnewcustomer\" component={CreateCustomer} />\r\n            <Route path=\"/\" component={App} />\r\n            <Route component={NotFound}/>\r\n        </Switch>  \r\n    </Router>\r\n)\r\n\r\nconst app = <Provider store={store}><Routing/></Provider>\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}